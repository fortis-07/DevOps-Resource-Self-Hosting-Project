terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 3.0"
    }
    cloudflare = {
      source  = "cloudflare/cloudflare"
      version = "~> 3.0"
    }
  }
  required_version = ">= 1.0"
}

provider "aws" {
  region = var.aws_region
}

provider "cloudflare" {
  email   = var.cloudflare_email
  api_key = var.cloudflare_api_key
}

resource "aws_vpc" "howsk" {
  cidr_block           = "10.0.0.0/16"
  instance_tenancy     = "default"
  enable_dns_hostnames = "true"
  enable_dns_support   = "true"

  tags = {
    Name = "vpc7"
  }
}

resource "aws_subnet" "howsknet" {
  vpc_id                  = aws_vpc.howsk.id
  cidr_block              = "10.0.1.0/24"
  map_public_ip_on_launch = true
  availability_zone       = "us-east-1a"
  
  tags = {
    Name = "snet7"
  }
}

resource "aws_internet_gateway" "devgate" {
  vpc_id = aws_vpc.howsk.id

  tags = {
    Name = "gate7"
  }
}

resource "aws_route_table" "devroutetable" {
  vpc_id = aws_vpc.howsk.id

  tags = {
     Name = "rt7"
  }
}

resource "aws_route" "dev_route" {
  route_table_id         = aws_route_table.devroutetable.id
  destination_cidr_block = "0.0.0.0/0"
  gateway_id             = aws_internet_gateway.devgate.id
}

resource "aws_route_table_association" "devsociation" {
  subnet_id      = aws_subnet.howsknet.id
  route_table_id = aws_route_table.devroutetable.id
}

resource "aws_security_group" "howsksg" {
  name        = "allow_web"
  description = "Allow inbound traffic and outbound traffic"
  vpc_id      = aws_vpc.howsk.id

  tags = {
    Name = "sg7"
  }


ingress {
    description = "SSH from anywhere"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "HTTP from anywhere"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "HTTPS from anywhere"
    from_port   = 433
    to_port     = 433
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }  

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

}
resource "aws_key_pair" "howsk_pair" {
  key_name   = "howskkey"  # Name of the key pair
  public_key = file("~/.ssh/id_rsa.pub")  # Path to the public key file
}

resource "aws_iam_role" "ec2_s3_access_role" {
  name = "EC2S3AccessRole"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "ec2.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "s3_access_policy" {
  role       = aws_iam_role.ec2_s3_access_role.name
  policy_arn = "arn:aws:iam::aws:policy/AmazonS3FullAccess"

  depends_on = [aws_iam_role.ec2_s3_access_role]
}

resource "aws_iam_instance_profile" "ec2_s3_profile" {
  name = "EC2S3Profile"
  role = aws_iam_role.ec2_s3_access_role.name
}

resource "aws_instance" "hoswk" {
  ami                    = var.ami_id
  instance_type          = var.instance_type
  iam_instance_profile   = aws_iam_instance_profile.ec2_s3_profile.name
  vpc_security_group_ids = [aws_security_group.howsksg.id]
  subnet_id              = aws_subnet.howsknet.id
  key_name               = var.key_name  
  tags = {
    Name = "hoswk"
  }
}

resource "aws_eip" "hoswk_ip" {
  instance = aws_instance.hoswk.id
  vpc      = true
}

resource "cloudflare_record" "server_dns" {
  zone_id = var.cloudflare_zone_id
  name    = var.domain_name
  value   = aws_eip.hoswk_ip.public_ip
  type    = "A"
  proxied = false
}

resource "cloudflare_record" "traefik" {
  zone_id = var.cloudflare_zone_id
  name    = "traefik.${var.domain_name}"
  value   = aws_eip.hoswk_ip.public_ip  
  type    = "A"                            
  ttl     = 300                            
  proxied = false                          
lifecycle {
    create_before_destroy = true
  }
}
resource "cloudflare_record" "jenkins" {
  zone_id = var.cloudflare_zone_id
  name    = "jenkins.${var.domain_name}"
  value   = aws_eip.hoswk_ip.public_ip  
  type    = "A"                           
  ttl     = 300                            
  proxied = false                         
}

resource "cloudflare_record" "prometheus" {
  zone_id = var.cloudflare_zone_id
  name    = "prometheus.${var.domain_name}"
  value   = aws_eip.hoswk_ip.public_ip  
  type    = "A"                            
  ttl     = 300                            
  proxied = false                          
}

resource "cloudflare_record" "grafana" {
  zone_id = var.cloudflare_zone_id
  name    = "grafana.${var.domain_name}"
  value   = aws_eip.hoswk_ip.public_ip  
  type    = "A"                            
  ttl     = 300                            
  proxied = false                          
}

resource "cloudflare_record" "vaultwarden" {
  zone_id = var.cloudflare_zone_id
  name    = "vaultwarden.${var.domain_name}"
  value   = aws_eip.hoswk_ip.public_ip  
  type    = "A"                            
  ttl     = 300                            
  proxied = false 
}

resource "aws_s3_bucket" "backup_bucket" {
  bucket = var.backup_bucket_name
}

# Separate S3 bucket versioning
resource "aws_s3_bucket_versioning" "backup_bucket_versioning" {
  bucket = aws_s3_bucket.backup_bucket.bucket

  versioning_configuration {
    status = "Enabled"
  }
}


resource "aws_s3_bucket_lifecycle_configuration" "backup_bucket_lifecycle" {
  bucket = aws_s3_bucket.backup_bucket.id

  rule {
    id     = "expire_old_objects"
    status = "Enabled"

    expiration {
      days = 30
    }
  }
}

resource "null_resource" "ansible_provisioner" {
  depends_on = [aws_instance.hoswk, aws_eip.hoswk_ip]

  provisioner "local-exec" {
    command = "ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i '${aws_eip.hoswk_ip.public_ip},' -u ubuntu --private-key ${var.private_key_path} ./ansible.yaml -e \"backup_bucket_name=${aws_s3_bucket.backup_bucket.id}\""

}

provisioner "local-exec" {
    when    = destroy
    command = "echo 'Cleanup tasks or additional playbooks during destroy phase'"
  }

  triggers = {
    always_run = "${timestamp()}"
  }
}


